#include <OneWire.h>
#include <DS18B20.h>
#include <LiquidCrystal.h>

//Definicje pinów i innych stałych
#define TERMOMETR 8
#define TERMOMETR_PRECYZJA 10
#define TERMOMETR_CZASPOMIARU 3
#define LED_RS 0
#define LED_E 1
#define LED_D4 2
#define LED_D5 3
#define LED_D6 4
#define LED_D7 5
#define MODE 12
#define DOWN 10
#define UP 9
#define OK 11
#define MIESZACZ 6
#define GRZALKA 7

#define NASTAWIANIE_TEMP 1
#define NASTAWIANIE_POW 2
#define TRYB 4
#define NASTAWIANIE_CZAS 3
#define PRACA 5

boolean flagaMODE=false;
boolean flagaDOWN=false;
boolean flagaUP=false;
boolean flagaOK=false;

float temp_zad=30;
float roznica=0;

unsigned short int poz_menu=NASTAWIANIE_TEMP;

unsigned short int czas_pow=1;
boolean pracad=false;
boolean mieszanie=false;
byte mieszanie_licznik=0;

unsigned short int minuty=22;
unsigned short int sekundy;
byte licz=0;

boolean czyciagly=0;
// Adres czujnika (zczytany w innym programie)
byte address[8] = {0x28,0xFF, 0xAB, 0x9, 0x82, 0x15, 0x2, 0x1A};

//Utworzenie obiektu do obsługi wyświetlacza led
LiquidCrystal lcd(LED_RS, LED_E, LED_D4, LED_D5, LED_D6, LED_D7);

//Utworzenie obiektu do obsługi czujnika temperatury
OneWire onewire(TERMOMETR);
DS18B20 sensors(&onewire);
byte termometr_licznik=0;
float termometr_odczyt=0;
boolean termometr_pomiar=true;




void pciSetup(byte pin) 
{
    *digitalPinToPCMSK(pin) |= bit (digitalPinToPCMSKbit(pin));  // enable pin
    PCIFR  |= bit (digitalPinToPCICRbit(pin)); // clear any outstanding interrupt
    PCICR  |= bit (digitalPinToPCICRbit(pin)); // enable interrupt for the group 
}

// Use one Routine to handle each group

ISR (PCINT0_vect) // handle pin change interrupt for D8 to D13 here
 {    
     
 static unsigned long last_interrupt_time = 0;
 unsigned long interrupt_time = millis();
 // If interrupts come faster than 200ms, assume it's a bounce and ignore
 if (interrupt_time - last_interrupt_time > 100) 
 {
   if(digitalRead(DOWN)) flagaDOWN=true;
   if(digitalRead(UP)) flagaUP=true;
   if(digitalRead(MODE)) flagaMODE=true;
   if(digitalRead(OK)) flagaOK=true;
 }
 last_interrupt_time = interrupt_time;
  if(!digitalRead(DOWN)&&!digitalRead(OK)&&!digitalRead(UP)&&!digitalRead(MODE))
  {
    flagaMODE=false;
    flagaDOWN=false;
    flagaUP=false;
    flagaOK=false; 
  }
 } 

void nast_temp()
{
  //Wyświetlenie temperatury
  lcd.setCursor(0, 1);
  lcd.print("Tmp.zad: ");
  lcd.print(temp_zad);
  lcd.print((char)223);
  lcd.print("C");
  
  if(flagaUP) temp_zad+=0.5;
  if(flagaDOWN) temp_zad-=0.5;
  if(temp_zad<25) temp_zad=35;
  if(temp_zad>45) temp_zad=45;
  
  digitalWrite(GRZALKA,LOW);
  digitalWrite(MIESZACZ,LOW);
}

void nast_czas()
{
  lcd.setCursor(0, 1);
  lcd.print("Czas.zad: ");
  lcd.print(minuty);
  lcd.print(" min");
  
  if(flagaUP) minuty++;
  if(flagaDOWN) minuty--;
  if(minuty<0) minuty=0;
  if(minuty>59) minuty=59; 
  
    digitalWrite(GRZALKA,LOW);
  digitalWrite(MIESZACZ,LOW);
}
void tryb()
{
  lcd.setCursor(0, 1);
  lcd.print("Tryb: ");
  if(czyciagly) 
  {
    lcd.print("ciagly    ");
  }
  else
  {
    lcd.print("normalny  ");
  }
  if(flagaDOWN||flagaUP) czyciagly=!czyciagly;
  digitalWrite(GRZALKA,LOW);
  digitalWrite(MIESZACZ,LOW);

}
void praca()
{
  if(flagaDOWN||flagaUP||flagaOK) pracad=!pracad;
  lcd.setCursor(0, 1);
  lcd.print("STAN: ");
  if(pracad)
  {
    lcd.print("ZALACZONY ");
    if(licz>=60) {minuty--; licz=0;}
    if(minuty<=0) pracad=false;
    digitalWrite(MIESZACZ,mieszanie);
    if(czyciagly)
    {
     digitalWrite(GRZALKA,HIGH);
    }
    else
    {
     if(termometr_odczyt<temp_zad) 
     {  
        digitalWrite(GRZALKA,HIGH);
     }
     else
     {
       digitalWrite(GRZALKA,LOW);
     }
    }
  }
  else
  {
    lcd.print("WYLACZONY ");
    digitalWrite(GRZALKA,LOW);
    digitalWrite(MIESZACZ,LOW);
  }

}

void nast_pow()
{
  lcd.setCursor(0, 1);
  lcd.print("Miesz.zad: ");
  lcd.print(czas_pow);
  lcd.print(" sek");
  
  if(flagaUP) czas_pow++;
  if(flagaDOWN) czas_pow--;
  if(czas_pow<1) czas_pow=1;
  if(czas_pow>9) czas_pow=9;
  
  digitalWrite(GRZALKA,LOW);
  digitalWrite(MIESZACZ,LOW);
  
}

void menu()
{
  lcd.setCursor(0, 0);
  lcd.print("Tmp:");
  lcd.print(termometr_odczyt);
  lcd.print(" ");
  lcd.print(minuty);
  lcd.print(" min");
  if(flagaMODE==true) poz_menu++;
  if(poz_menu > 5) poz_menu=NASTAWIANIE_TEMP;
  switch(poz_menu)
  {
    case NASTAWIANIE_TEMP:  nast_temp(); break;
    case NASTAWIANIE_POW:  nast_pow();  break;
    case NASTAWIANIE_CZAS: nast_czas(); break;
    case TRYB:             tryb();      break;
    case PRACA:            praca();     break;
    default:               nast_temp(); break;
  }
  flagaMODE=false;
  flagaDOWN=false;
  flagaUP=false;
  flagaOK=false;
}





//###############################################

void setup() {
  //Deklaracja pinów przycisków

// enable interrupt for pin...


pinMode(MODE, INPUT);
pinMode(UP, INPUT);
pinMode(DOWN, INPUT);
pinMode(OK, INPUT);
pinMode(13,OUTPUT);
pinMode(MIESZACZ,OUTPUT);
pinMode(GRZALKA,OUTPUT);


  pciSetup(MODE);
  pciSetup(UP);
  pciSetup(DOWN);
  pciSetup(OK);
  
  //Ustawienie timera 16 bitowego, tak by wywoływał przerwanie co 1 sekundę
  noInterrupts();           //Wyłączenie przerwań       
  TCCR1A = 0;               //Zerowanie rejestrów licznika
  TCCR1B = 0;
  TCNT1  = 0;               //Ustawienie początkowej wartości licznika 
  OCR1A = 15624;           //Ustawienie wartości do porównania (jak będzie taka wartosc licznika to się przekręci)
  TCCR1B |= (1 << WGM12);  //Ustawia CTC mod
  TCCR1B |= (1 << CS12) | (1 << CS10);  //Ustawia dzielnik na 1024
  TIMSK1 |= (1 << OCIE1A); //Ustawia przerwanie przy porównaniu
  interrupts();            //Włącza przerwania
  
  //Określenie rozmiaru wyświetlacza
  lcd.begin(16, 2);
  lcd.clear();
  //Wyświetlenie wiadomości początkowej

  
  //Ustawienie precyzji czujnika
  sensors.begin(TERMOMETR_PRECYZJA);
  sensors.request(address);
}

ISR(TIMER1_COMPA_vect)        
{
  if(termometr_licznik>=TERMOMETR_CZASPOMIARU)
  {
    termometr_pomiar=true;
    termometr_licznik=0;
  }
  else
  {
    termometr_licznik++;
  }
  if(mieszanie_licznik>=czas_pow)
  {
    mieszanie=true;
    mieszanie_licznik=0;
  }
  else
  {
   mieszanie_licznik++;
   mieszanie=false;
  }
  if(poz_menu==PRACA)
  {
   licz++; 
  }
}

void loop() {
  //Pomiar temperatury
  if (termometr_pomiar==true&&sensors.available())
  {
    termometr_odczyt = sensors.readTemperature(address);

    sensors.request(address);
    termometr_pomiar=false;
  }
  menu();
  
}

